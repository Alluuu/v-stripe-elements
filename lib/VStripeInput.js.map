{"version":3,"sources":["../src/VStripeInput.ts"],"names":[],"mappings":"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","sourcesContent":["// Types\nimport { ComponentOptions, VNode } from 'vue'\n\n// Styles\nimport './VStripeInput.sass'\n\n// Extensions and Components\nimport { VProgressLinear, VTextField } from 'vuetify/lib'\n\n// Mixins\nimport mixins from 'vuetify/lib/util/mixins'\nconst base = mixins(VTextField)\n\n// Extend `base` to define the VStripeInput component\nexport default base.extend<ComponentOptions<VTextField>>({\n  name: 'v-stripe-input',\n  extends: VTextField,\n  inheritAttrs: false,\n  props: {\n    apiKey: {\n      type: String,\n      required: true,\n    },\n    font: {\n      type: String,\n      default: 'Roboto',\n    },\n    hideIcon: Boolean,\n    hidePostalCode: Boolean,\n    iconStyle: {\n      type: String,\n      default: 'default',\n    },\n    zip: {\n      type: String,\n      default: '',\n    },\n  },\n  data () {\n    return {\n      card: null,\n      cardError: null,\n      elements: null,\n      isReady: false,\n      okToSubmit: false,\n      stripe: null,\n    }\n  },\n  computed: {\n    classes (): object {\n      return {\n        ...VTextField.options.computed.classes.call(this),\n        'v-stripe-input': true,\n      }\n    },\n  },\n  watch: {\n    isDark (newVal: boolean, oldVal: boolean) {\n      if (newVal !== oldVal && this.card !== null) {\n        const style = this.genStyle(this.font, this.$vuetify.theme.currentTheme, this.$vuetify.theme.dark)\n        this.card.update({ style })\n      }\n    },\n    isDisabled (disabled: boolean, oldVal: boolean) {\n      if (disabled !== oldVal) {\n        this.card.update({ disabled })\n      }\n    },\n  },\n  mounted () {\n    // Handle tasks NOT related to actual DOM rendering or manipulation\n    const cardProps = {\n      classes: { focus: 'focus', empty: 'empty' },\n      disabled: this.disabled,\n      hideIcon: this.hideIcon,\n      hidePostalCode: this.hidePostalCode,\n      iconStyle: this.iconStyle,\n      style: this.genStyle(this.font, this.$vuetify.theme.currentTheme, this.$vuetify.theme.dark),\n      value: {\n        postalCode: this.zip,\n      },\n    }\n    this.loadStripe()\n      // initialize the Stripe.js object\n      .then(() => { this.stripe = Stripe(this.apiKey) }) // eslint-disable-line no-undef\n      // then create a Stripe elements generator\n      .then(() => this.stripe.elements(this.genFont(this.font)))\n      // then create a card element\n      .then((elements: stripe.elements.Elements) => elements.create('card', cardProps))\n      // then setup card events and mount the card\n      .then((card: stripe.elements.Element) => {\n        this.card = card\n        card.on('blur', this.onCardBlur)\n        card.on('change', this.onCardChange)\n        card.on('focus', this.onCardFocus)\n        card.on('ready', this.onCardReady)\n        card.mount(`#${this.computedId}`)\n      })\n      .catch((err: Error) => { console.log(err) })\n  },\n  methods: {\n    clearableCallback () {\n      this.card.clear()\n      VTextField.options.methods.clearableCallback.call(this)\n    },\n    /**\n     * TODO: Should this throw an error if the font is invalid?\n     * Allows users of the component to specify the font that will be used\n     * inside the text fields generated by Stripe. Does NOT affect the font\n     * used by the label, hint, or error messages. These fonts can/should be\n     * set at the app level along with all of the other UI fonts.\n     *\n     * @param   {string} font The name of a Google font, or a URL to a valid font\n     * @returns {object}      An object in the form required by `Stripe.elements()`\n     */\n    genFont (font: string): object {\n      const cssSrc = this.isURL(font)\n        ? font\n        : `https://fonts.googleapis.com/css?family=${encodeURI(font)}:400`\n      return { fonts: [{ cssSrc }] }\n    },\n    /**\n     * Generates the HTML element to which the Stripe element will attach\n     * itself. All that is needed is a <div> with a known ID. This <div>\n     * gets replaced by Stripe with an IFrame with their custom inputs.\n     * see: {@link|https://stripe.com/docs/stripe-js/reference#element-mount}\n     */\n    genInput (): VNode {\n      return this.$createElement('div', { attrs: { id: this.computedId } })\n    },\n    /**\n     * Maintains the ability for users of the component to control the\n     * loading/progress indicator of the component, but also shows the\n     * progress bar while the Stripe library is being loaded.\n     */\n    genProgress (): VNode | VNode[] | null {\n      if (this.loading === false && this.isReady) return null\n      return this.$slots.progress || this.$createElement(VProgressLinear, {\n        props: {\n          absolute: true,\n          color: (this.loading === true || this.loading === '')\n            ? (this.color || 'primary')\n            : (this.loading || 'primary'),\n          height: this.loaderHeight,\n          indeterminate: true,\n        },\n      })\n    },\n    /**\n     * Generate styles for Stripe elements\n     */\n    genStyle: (font: string, theme: VuetifyThemeVariant, dark = false): object => ({\n      base: {\n        color: dark ? '#ffffff' : '#000000',\n        fontFamily: `'${font}', sans-serif`,\n        fontSize: '16px',\n        fontSmoothing: 'antialiased',\n        iconColor: dark ? '#eceff1' : '#455a64',\n        '::placeholder': {\n          color: dark ? 'rgb(255,255,255,0.7)' : 'rgb(0,0,0,0.54)',\n        },\n        ':focus::placeholder': {\n          color: dark ? 'rgb(255,255,255,0.7)' : 'rgb(0,0,0,0.54)',\n        },\n      },\n      invalid: {\n        color: theme.error,\n        iconColor: theme.error,\n      },\n    }),\n    /**\n     * Loosely validates a URL\n     * Based on: {@link|https://github.com/segmentio/is-url}\n     *\n     * @param   {string}  url The string to be tested\n     * @returns {boolean}     True if the url string passes the test\n     */\n    isURL: (url: string): boolean => {\n      const protocolAndDomainRegex = /^(?:\\w+:)?\\/\\/(\\S+)$/\n      const localhostDomainRegex = /^localhost[:?\\d]*(?:[^:?\\d]\\S*)?$/\n      const nonLocalhostDomainRegex = /^[^\\s.]+\\.\\S{2,}$/\n      if (typeof url !== 'string') return false\n      const match = url.match(protocolAndDomainRegex)\n      if (!match) return false\n      const everythingAfterProtocol = match[1]\n      if (!everythingAfterProtocol) return false\n      if (\n        localhostDomainRegex.test(everythingAfterProtocol) ||\n        nonLocalhostDomainRegex.test(everythingAfterProtocol)\n      ) {\n        return true\n      }\n      return false\n    },\n    loadStripe (): Promise<boolean> {\n      // is Stripe already available?\n      if (typeof Stripe !== 'undefined') return Promise.resolve(true)\n      // is the external script loader available?\n      if (typeof this.$loadScript === 'undefined') {\n        // no\n        throw new Error('[VStripeInput Error]: Stripe is not available and could not be loaded. Please make sure that you have installed and configured all of the necessary dependencies to use this component.')\n      } else {\n        // yes, let's try to get Stripe\n        return this.$loadScript('https://js.stripe.com/v3/')\n          .then(() => true)\n          .catch((err: Error) => {\n            throw new Error('[VStripeInput Error] There was a problem loading Stripe: ' + err.message)\n          })\n      }\n    },\n    onCardBlur (e: stripe.elements.ElementChangeResponse) {\n      this.isFocused = false\n      this.$emit('blur', e)\n    },\n    onCardChange (e: stripe.elements.ElementChangeResponse) {\n      if (e.error) {\n        // handle card errors\n        this.errorBucket.push(e.error.message)\n      }\n      if (e.complete) {\n        // handle card input is complete\n        this.errorBucket = []\n      }\n      if (e.empty) {\n        this.lazyValue = !e.empty\n      }\n    },\n    onCardFocus (e: stripe.elements.ElementChangeResponse) {\n      this.isFocused = true\n      this.$emit('focus', true) // Do we want to emit? Is this the right value to emit?\n    },\n    onCardReady (e: stripe.elements.ElementChangeResponse) {\n      this.isReady = true\n      this.autofocus && this.card.focus()\n      this.$emit('ready', e)\n    },\n    setLabelWidth () {\n      if (!this.outlined) return\n      this.labelWidth = this.$refs.label.offsetWidth * 0.75 + 6\n    },\n  },\n})\n"],"sourceRoot":"","file":"VStripeInput.js"}